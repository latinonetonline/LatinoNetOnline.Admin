@page "/callforspeakers/{Id:guid}/confirm"
@attribute [Authorize(Roles = "Admin")]
@using LatinoNetOnline.Admin.Pages.CallForSpeakers.Components
@using System.IO
@using System.Text
@inject IProposalService ProposalService
@inject IWebinarService WebinarService
@inject IJSRuntime JSRuntime
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject NavigationManager NavigationManager

@if (loading)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{

    <h3>Confirmar: @proposal.Title</h3>

    <div class="row">
        <div class="col-xl-6">
            <h3 style="margin-top: 2rem">Flyer</h3>

            <InputFile OnChange="@LoadFiles" />
            <img src="@imageBase64" width="100px" />

            <h3 style="margin-top: 2rem">Streamyard</h3>
            <RadzenTextBox Style="width:400px" @bind-Value=@webinar.Streamyard Placeholder="https://streamyard.com/ca1zxyzis8" />

            <h3 style="margin-top: 2rem">Youtube</h3>
            <RadzenTextBox Style="width:400px" @bind-Value=@webinar.LiveStreaming Placeholder="https://www.youtube.com/watch?v=ss0Un7fa-Mw" />

        </div>
    </div>

    <RadzenButton style="margin-top: 2rem" Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Success" Text="Confirmar" Icon="verified" Click="args => ConfirmProposal()" />
}


@code {
    [Parameter]
    public Guid Id { get; set; }

    Proposal proposal;
    Webinar webinar;
    IEnumerable<Speaker> speakers;
    bool loading = true;

    string imageBase64 = null;
    MemoryStream image = null;


    protected override async Task OnInitializedAsync()
    {
        var proposalResult = await ProposalService.GetByIdAsync(Id);
        proposal = proposalResult.Result.Proposal;
        speakers = proposalResult.Result.Speakers;

        var webinarResult = await WebinarService.GetByProposalAsync(Id);
        webinar = webinarResult.Result;
        imageBase64 = webinar.Flyer;
        loading = false;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var memoryStream = new MemoryStream();

            await file.OpenReadStream().CopyToAsync(memoryStream);

            this.image = memoryStream;

            string base64 = Convert.ToBase64String(memoryStream.ToArray());

            imageBase64 = string.Format("data:image/png;base64,{0}", base64);
        }
    }

    async Task ConfirmProposal()
    {

        MemoryStream stream = new MemoryStream(image.ToArray());
        stream.Seek(0, SeekOrigin.Begin);

        loading = true;

        var result = await WebinarService.ConfirmAsync(new(webinar.Id));

        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo($"CallForSpeakers/{Id}");
        }
        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error Confirmar Webinar",
                Detail = result.Error?.Code,
                Duration = 4000
            });
        }
    }
}
