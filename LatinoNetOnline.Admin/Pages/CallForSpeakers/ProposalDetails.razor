@page "/callforspeakers/{Id:guid}"
@attribute [Authorize(Roles = "Admin")]
@using LatinoNetOnline.Admin.Pages.CallForSpeakers.Components
@inject IProposalService ProposalService
@inject IWebinarService WebinarService
@inject IJSRuntime JSRuntime
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject NavigationManager NavigationManager

@if (loading)
{
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{
    <h1>@proposal.Title</h1>

    <RadzenTabs style="max-height: 600px" RenderMode="TabRenderMode.Client">
        <Tabs>
            <RadzenTabsItem Text="Speakers">
                <SpeakerTab Speakers="speakers" />
            </RadzenTabsItem>

            <RadzenTabsItem Text="Charla">
                <ProposalTab Proposal="proposal" />
            </RadzenTabsItem>

            <RadzenTabsItem Text="Preguntas">
                <QuestionTab Proposal="proposal" />
            </RadzenTabsItem>

        </Tabs>

    </RadzenTabs>
    <div class="row">
        @if (!hasWebinar)
        {
            <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Success" Text="Confirmar" Icon="verified" Click="args => ConfirmProposal()" />
            <RadzenButton Size="ButtonSize.Medium" Text="Editar" Icon="edit" />
        }

        <RadzenButton Size="ButtonSize.Medium" ButtonStyle="ButtonStyle.Danger" Text="Eliminar" Icon="close" Click="args => Delete()" />
    </div>
}


@code {
    [Parameter]
    public Guid Id { get; set; }

    Proposal proposal;
    IEnumerable<Speaker> speakers;
    bool loading = true;
    bool hasWebinar = false;

    protected override async Task OnInitializedAsync()
    {

        var webinarResult = await WebinarService.GetByProposalAsync(Id);

        if (webinarResult.IsSuccess)
        {
            proposal = webinarResult.Result.Proposal;
            speakers = webinarResult.Result.Speakers;
            hasWebinar = true;
        }
        else
        {
            var proposalResult = await ProposalService.GetByIdAsync(Id);
            proposal = proposalResult.Result.Proposal;
            speakers = proposalResult.Result.Speakers;
        }

        loading = false;
    }

    async Task Delete()
    {
        var result = await DialogService.Confirm($"Â¿Desea borrar la charla?", "Eliminar Charla", new ConfirmOptions()
        {
            OkButtonText = "Si",
            CancelButtonText = "No"
        });

        if (result.HasValue && result.Value)
        {

            var response = await ProposalService.DeleteAsync(proposal.ProposalId);

            if (response.IsSuccess)
            {
                NavigationManager.NavigateTo("CallForSpeakers");
            }
            else
                ShowNotification("Error Eliminar Charla", response);

        }
    }

    void ShowNotification(string title, OperationResult result)
    {
        NotificationService.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Error,
            Summary = title,
            Detail = result.Error?.Code,
            Duration = 4000
        });
    }

    async Task ConfirmProposal()
    {
        var meetup = await DialogService.OpenAsync<DialogProposalConfirm>("Confirmar Webinar");

        var result = await WebinarService.CreateAsync(new(Id, meetup.Id));

        await JSRuntime.InvokeAsync<object>("open", "https://www.meetup.com/es-ES/latino-net-online/events/" + result.Result.MeetupId, "_blank");

        NavigationManager.NavigateTo("CallForSpeakers");
    }
}